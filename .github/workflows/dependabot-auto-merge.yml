name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Check if PR is safe to auto-merge
        id: check
        run: |
          # Check if PR is from dependabot
          if [ "${{ github.actor }}" != "dependabot[bot]" ]; then
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get PR title to check update type
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          # Only auto-merge patch updates and minor updates for dev dependencies
          if echo "$PR_TITLE" | grep -E "(Bump|Update).*from.*to.*" > /dev/null; then
            # Extract version numbers
            FROM_VERSION=$(echo "$PR_TITLE" | sed -n 's/.*from \([0-9.]*\).*/\1/p')
            TO_VERSION=$(echo "$PR_TITLE" | sed -n 's/.*to \([0-9.]*\).*/\1/p')

            if [ -n "$FROM_VERSION" ] && [ -n "$TO_VERSION" ]; then
              # Check if it's a patch update (same major.minor, different patch)
              FROM_MAJOR_MINOR=$(echo "$FROM_VERSION" | cut -d. -f1-2)
              TO_MAJOR_MINOR=$(echo "$TO_VERSION" | cut -d. -f1-2)

              if [ "$FROM_MAJOR_MINOR" = "$TO_MAJOR_MINOR" ]; then
                echo "ready=true" >> $GITHUB_OUTPUT
                echo "Patch update detected: $FROM_VERSION -> $TO_VERSION"
                exit 0
              fi
            fi
          fi

          # Check if it's a dev dependency (ruff, pre-commit, etc.)
          if echo "$PR_TITLE" | grep -E "(ruff|pre-commit|black|mypy|pytest)" > /dev/null; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "Dev dependency update detected"
            exit 0
          fi

          echo "ready=false" >> $GITHUB_OUTPUT
          echo "Major/minor update or unknown dependency - requires manual review"

      - name: Check PR status
        if: steps.check.outputs.ready == 'true'
        id: status
        run: |
          # Check if PR is mergeable
          MERGEABLE=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq '.mergeable')
          if [ "$MERGEABLE" != "true" ]; then
            echo "mergeable=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check status checks
          STATUS_CHECKS=$(gh pr view ${{ github.event.pull_request.number }} --json statusCheckRollup --jq '.statusCheckRollup[] | select(.conclusion != "SUCCESS" and .conclusion != "SKIPPED") | .name')
          if [ -n "$STATUS_CHECKS" ]; then
            echo "mergeable=false" >> $GITHUB_OUTPUT
            echo "Waiting for status checks: $STATUS_CHECKS"
            exit 0
          fi

          echo "mergeable=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR
        if: steps.check.outputs.ready == 'true' && steps.status.outputs.mergeable == 'true'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --auto
          echo "âœ… Auto-merged Dependabot PR: ${{ github.event.pull_request.title }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: steps.check.outputs.ready == 'false' || steps.status.outputs.mergeable == 'false'
        run: |
          if [ "${{ steps.check.outputs.ready }}" = "false" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "ðŸ¤– Auto-merge skipped: This appears to be a major/minor update that requires manual review."
          else
            gh pr comment ${{ github.event.pull_request.number }} --body "ðŸ¤– Auto-merge waiting: PR is not ready for merging (conflicts, failed checks, or not mergeable)"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
